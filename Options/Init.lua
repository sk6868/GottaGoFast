local GottaGoFast = LibStub("AceAddon-3.0"):GetAddon("GottaGoFast")

function GottaGoFast:InitOptions()
  self.LSM = LibStub:GetLibrary("LibSharedMedia-3.0");
  --self.LSM:Register("font", "Myriad Condensed Web", "Interface\\Addons\\GottaGoFast\\MyriadCondensedWeb.ttf")
  local defaults = {
    profile = {
      GoldTimer = true,
      TimerType = "TrueTimerNoMS",
      FrameAnchor = "RIGHT",
      FrameX = 0,
      FrameY = 0,
      TimerAlign = "CENTER",
      TimerX = 0,
      TimerY = 0,
      TimerFont = "Myriad Condensed Web",
      TimerFontSize = 29,
      TimerColor = "ffffffff",
      TimerFontFlag = "OUTLINE",
      ObjectiveAlign = "LEFT",
      ObjectiveX = 0,
      ObjectiveY = -40,
      ObjectiveFont = "Myriad Condensed Web",
      ObjectiveFontSize = 21,
      ObjectiveCollapsed = false,
      ObjectiveColor = "ffffffff",
      ObjectiveCompleteColor = "ff0ff000",
      ObjectiveFontFlag = "OUTLINE",
      IncreaseColor = "ffffffff",
      AffixesColor = "ffffffff",
      LevelColor = "ffffffff",
      DeathColor = "ffffffff",
      LevelInTimer = true,
      LevelInObjectives = false,
      AffixesInObjectives = true,
      IncreaseInObjectives = true,
      DeathInObjectives = false,
      MobPoints = false,
      IndividualMobValue = true,
      ObjectiveCompleteInObjectives = true,
      TimerTooltip = true,
      History = {},
      DebugMode = false,
      Version = 0,
      AutoDialog = false,
      SpyHelper = false,
    },
  }
  local options = {
    name = "GottaGoFast",
    handler = self,
    type = "group",
    args = {
      cms = {
        name = "Core Features",
        type = "group",
        args = {
          TimerType = {
            order = 1,
            type = "select",
            name = "Timer Type",
            desc = "TrueTimer is timed off the start of the dungeon using system time.\nI recommend you use this option.\nBlizzard's timer is known to bug up to 20 seconds.\nI will report details soon.",
            --values = {["TrueTimerMS"] = "TrueTimer (Miliseconds)", ["TrueTimerNoMS"] = "TrueTimer (No Miliseconds)", ["Blizzard"] = "Blizzard's Timer"},
			values = {["TrueTimerNoMS"] = "TrueTimer (No Miliseconds)", ["Blizzard"] = "Blizzard's Timer"},
            get = self.GetTimerType,
            set = self.SetTimerType,
          },
          GoldTimer = {
            order = 2,
            type = "toggle",
            name = "Gold Timer",
            desc = "Toggles Gold Timer",
            get = self.GetGoldTimer,
            set = self.SetGoldTimer,
          },
          LevelInObjectives = {
            order = 3,
            type = "toggle",
            name = "CM Level Display (Objectives)",
            desc = "Show the current CM Level in the objectives list",
            get = self.GetLevelInObjectives,
            set = self.SetLevelInObjectives,
          },
          AffixesInObjectives = {
            order = 4,
            type = "toggle",
            name = "Affix Display (Objectives)",
            desc = "Show the current Affixes in the objectives list",
            get = self.GetAffixesInObjectives,
            set = self.SetAffixesInObjectives,
          },
          LevelInTimer = {
            order = 5,
            type = "toggle",
            name = "CM Level Display (Timer)",
            desc = "Show the current CM Level at the start of the timer",
            get = self.GetLevelInTimer,
            set = self.SetLevelInTimer,
          },
          IncreaseInObjectives = {
            order = 6,
            type = "toggle",
            name = "Keystone Increase Display (Objectives)",
            desc = "Bonus Keystone Time Splits",
            get = self.GetIncreaseInObjectives,
            set = self.SetIncreaseInObjectives,
          },
          ObjectiveCompleteInObjectives = {
            order = 7,
            type = "toggle",
            name = "CM Objective Complete Display (Objectives)",
            desc = "Show the time objectives we're completed at",
            get = self.GetObjectiveCompleteInObjectives,
            set = self.SetObjectiveCompleteInObjectives,
          },
          DeathInObjectives = {
            order = 8,
            type = "toggle",
            name = "Death Contribution Display (Objectives)",
            desc = "Show the amount of deaths, and time loss they created in objectives",
            get = self.GetDeathInObjectives,
            set = self.SetDeathInObjectives,
          },
          MobPoints = {
            order = 9,
            type = "toggle",
            name = "Total Mob Value",
            desc = "Show Exact Number Of Points Used To Calculate Enemy Forces Percentage",
            get = self.GetMobPoints,
            set = self.SetMobPoints,
          },
          IndividualMobValue = {
            order = 10,
            type = "toggle",
            name = "Individual Mob Value",
            desc = "Show In Tooltip Individual Mobs Value Towards Enemy Forces",
            get = self.GetIndividualMobValue,
            set = self.SetIndividualMobValue,
          },
          TimerTooltip = {
            order = 11,
            type = "toggle",
            name = "Timer Tooltip",
            desc = "Display Detailed Information About Current M+ By Hovering Over The Timer. This Also Prevents Full Clickthrough Frames (Clickthrough Requires Reload)",
            get = self.GetTimerTooltip,
            set = self.SetTimerTooltip,
          },
        },
      },
      displayFrame = {
        name = "Display: Frame",
        type = "group",
        args = {
          unlocked = {
            order = 1,
            type = "toggle",
            name = "Unlocked",
            desc = "Toggles Unlock State Of Timer Frame",
            get = self.GetUnlocked,
            set = self.SetUnlocked,
          },
          ObjectiveCollapsed = {
            order = 2,
            type = "toggle",
            name = "Objective Tracker Collapse",
            desc = "Collapse Objective Tracker When Leaving CM / Timewalker",
            get = self.GetObjectiveCollapsed,
            set = self.SetObjectiveCollapsed,
          },
          TimerX = {
            order = 3,
            type = "range",
            name = "Timer X Offset",
            desc = "Default: 0",
            min = -100,
            max = 100,
            step = 1,
            get = self.GetTimerX,
            set = self.SetTimerX,
          },
          TimerY = {
            order = 4,
            type = "range",
            name = "Timer Y Offset",
            desc = "Default: 0",
            min = -100,
            max = 100,
            step = 1,
            get = self.GetTimerY,
            set = self.SetTimerY,
          },
          ObjectiveX = {
            order = 5,
            type = "range",
            name = "Objective X Offset",
            desc = "Default: 0",
            min = -100,
            max = 100,
            step = 1,
            get = self.GetObjectiveX,
            set = self.SetObjectiveX,
          },
          ObjectiveY = {
            order = 6,
            type = "range",
            name = "Objective Y Offset",
            desc = "Default: -40",
            min = -100,
            max = 100,
            step = 1,
            get = self.GetObjectiveY,
            set = self.SetObjectiveY,
          },
          DemoMode = {
            order = 19,
            type = "execute",
            name = "Demo Mode",
            desc = "Shows GottaGoFast Outside CM For Demo / Setup Purposes",
            func = self.ToggleDemoMode,
          },
        },
      },
      displayFont = {
        name = "Display: Font",
        type = "group",
        args = {
          TimerFontSize = {
            order = 7,
            type = "range",
            name = "Timer Font Size",
            desc = "Default: 29",
            min = 8,
            max = 32,
            step = 1,
            get = self.GetTimerFontSize,
            set = self.SetTimerFontSize,
          },
          ObjectiveFontSize = {
            order = 8,
            type = "range",
            name = "Objective Font Size",
            desc = "Default: 21",
            min = 8,
            max = 32,
            step = 1,
            get = self.GetObjectiveFontSize,
            set = self.SetObjectiveFontSize,
          },
          TimerFontFlag = {
            order = 9,
            type = "select",
            name = "Timer Font Flag",
            desc = "Default: OUTLINE",
            values = {["OUTLINE"] = "OUTLINE", ["THICKOUTLINE"] = "THICKOUTLINE", ["MONOCHROME"] = "MONOCHROME", ["NONE"] = "NONE"},
            get = self.GetTimerFontFlag,
            set = self.SetTimerFontFlag,
          },
          ObjectiveFontFlag = {
            order = 10,
            type = "select",
            name = "Objective Font Flag",
            desc = "Default: OUTLINE",
            values = {["OUTLINE"] = "OUTLINE", ["THICKOUTLINE"] = "THICKOUTLINE", ["MONOCHROME"] = "MONOCHROME", ["NONE"] = "NONE"},
            get = self.GetObjectiveFontFlag,
            set = self.SetObjectiveFontFlag,
          },
          TimerAlign = {
            order = 11,
            type = "select",
            name = "Timer Align",
            desc = "Default: CENTER",
            values = {["LEFT"] = "LEFT", ["CENTER"] = "CENTER", ["RIGHT"] = "RIGHT"},
            get = self.GetTimerAlign,
            set = self.SetTimerAlign,
          },
          ObjectiveAlign = {
            order = 12,
            type = "select",
            name = "Objective Align",
            desc = "Default: LEFT",
            values = {["LEFT"] = "LEFT", ["CENTER"] = "CENTER", ["RIGHT"] = "RIGHT"},
            get = self.GetObjectiveAlign,
            set = self.SetObjectiveAlign,
          },
          TimerFont = {
            order = 13,
            type = "select",
            dialogControl = "LSM30_Font",
            name = "Timer Font",
            desc = "Default: Arial, Monospaced Fonts like MyriadCondensedWeb are recommended",
            values = self.LSM:HashTable("font"),
            get = self.GetTimerFont,
            set = self.SetTimerFont,
          },
          ObjectiveFont = {
            order = 14,
            type = "select",
            dialogControl = "LSM30_Font",
            name = "Objective Font",
            desc = "Default: Arial, Monospaced Fonts like MyriadCondensedWeb are recommended",
            values = self.LSM:HashTable("font"),
            get = self.GetObjectiveFont,
            set = self.SetObjectiveFont,
          },
          ObjectiveColor = {
            order = 15,
            type = "color",
            name = "Objective Color",
            desc = "Default: White",
            get = self.GetObjectiveColor,
            set = self.SetObjectiveColor,
            hasAlpha = false,
          },
          ObjectiveCompleteColor = {
            order = 16,
            type = "color",
            name = "Objective Complete Color",
            desc = "Default: Green",
            get = self.GetObjectiveCompleteColor,
            set = self.SetObjectiveCompleteColor,
            hasAlpha = false,
          },
          TimerColor = {
            order = 17,
            type = "color",
            name = "Timer Color",
            desc = "Default: White",
            get = self.GetTimerColor,
            set = self.SetTimerColor,
            hasAlpha = false,
          },
          IncreaseColor = {
            order = 18,
            type = "color",
            name = "Keystone Increase Color",
            desc = "Default: White",
            get = self.GetIncreaseColor,
            set = self.SetIncreaseColor,
            hasAlpha = false,
          },
          AffixesColor = {
            order = 19,
            type = "color",
            name = "Affix Information Color",
            desc = "Default: White",
            get = self.GetAffixesColor,
            set = self.SetAffixesColor,
            hasAlpha = false,
          },
          LevelColor = {
            order = 20,
            type = "color",
            name = "Level Information Color",
            desc = "Default: White",
            get = self.GetLevelColor,
            set = self.SetLevelColor,
          },
          DeathColor = {
            order = 21,
            type = "color",
            name = "Death Information Color",
            desc = "Default: White",
            get = self.GetDeathColor,
            set = self.SetDeathColor,
          },
        },
      },
      dungeons = {
        name = "Dungeon Features",
        type = "group",
        args = {
          AutoDialog = {
            order = 1,
            type = "toggle",
            name = "Auto Dialog",
            desc = "Automatically Accepts Dialog Boxes In M+, Warning This Applies To All CoS Items",
            get = self.GetAutoDialog,
            set = self.SetAutoDialog,
          },
          SpyHelper = {
            order = 2,
            type = "toggle",
            name = "CoS Spy Helper",
            desc = "Prints Text About Spy Automatically During Mini-Game",
            get = self.GetSpyHelper,
            set = self.SetSpyHelper,
          },
        },
      },
    },
  };
  self.db = LibStub("AceDB-3.0"):New("GottaGoFastDB", defaults, true);
  LibStub("AceConfig-3.0"):RegisterOptionsTable("GottaGoFast", options);
  self.optionsFrame = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("GottaGoFast", "GottaGoFast");
end
